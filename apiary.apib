FORMAT: 1A
HOST: http://localhost:9000/user_exclusion/v1

# BABE User Exclusion Filter Microservice

The User Exclusion Filter Service objective is to store user's disregard list, be it by category or by source publisher.

The service will use it's own storage in `MySQL` DB and also will use it's own caching on `Redis`.

The database will be using shared database on `babe` database.

It has 1 table called `user_exclusion`

| Field Name       | Type         | Java Type      |
|------------------|--------------|----------------|
| uid              | Unsigned Int | long           |
| exclusion_filter | BLOB         | ProtobufModel  |
| last_update      | DateTime     | java.util.Date |



# Group User Exclusion Filter 

## Exclusion Filter [/{uid}]

+ Parameters
    + uid: 123 (number, required) - User ID.

### Add Exclusion Filters [PATCH]

Add exclusion filters to the exclusion filter stored on DB, steps are as follow:

1. Get exclusion filter model (Object) from DB on specific `uid`. 
2. Update the exclusion filter model by appending the supplied keys that are defined.
3. Make sure every list on exclusion filter model **(eg: catIds, etc)**, should be **treated** as a **Set**. Meaning all items inside should be unique.
4. Put the exclusion filter model back to DB (UPDATE). (Operation 1-4 should be **transactional**)
5. If record doesn't exist on DB, then create (INSERT) new record.
6. Whenever DB success, then remove cache on redis key `exc-filters:{uid}`.
7. Return OK to caller.

**NB:**

- If payload is empty or the object contain nothing, response **HTTP 204** as soon as possible.



+ Request (application/json)
    + Attributes (ExclusionFilterModel)

+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Put/Replace Exclusion Filters [PUT]

Put/replace exclusion filters to the exclusion filter stored on DB, steps are as follow:
 
1. Make sure every list on exclusion filter model **(eg: catIds, etc)**, should be **treated** as a **Set**. Meaning all items inside should be unique.
2. **Upsert** the exclusion filter model to the DB.
3. Whenever DB success, then remove cache on redis key `exc-filters:{uid}`.
4. Return OK to caller.

**NB:**

- If payload is empty or the object contain nothing, response **HTTP 204** as soon as possible.

+ Request (application/json)
    + Attributes (ExclusionFilterModel)
    
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Get User Exclusion Filters [GET]

Returns exclusion filters model by specified `uid`.

Steps to retrieve are as follow:

1. Check on redis key `exc-filters:{uid}` which value should be exclusion filter model encoded in `Protobuf`.
2. If not found on redis, check on DB for specified `uid`. Return the `exclusion_filter` field.
4. If `exclusion_filter` was retrieved from DB, then populate redis key `exc-filters:{uid}` with `exclusion_filter` encoded in Protobuf (binary) **TTL to 3 days** (Make it configurable).   
5. If `uid` id not found then return **HTTP 404**.
6. Otherwise return the model.

+ Response 200 (application/json)
    + Attributes (ExclusionFilterModel)
        
+ Response 404 (application/json)
    Return when User ID is not found.
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)





# Data Structures

## ExclusionFilterModel (object)
+ catIds: 1, 3, 5 (array[number], optional) - Category IDs to be disregarded.
+ srcIds: 66, 99, 101, 108 (array[number], optional) - Source IDs to be disregarded.

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError404 (Error)
+ errCode: `-5`
+ errMsg: Resource not found

## DefaultError413 (Error)
+ errCode: `-14`
+ errMsg: Request Entity Too Large

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down